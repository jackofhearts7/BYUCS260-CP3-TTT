{"ast":null,"code":"var _jsxFileName = \"/usr/share/caddy/tictactoe/src/board.js\",\n  _s = $RefreshSig$();\n// Importing the CSS for the board\nimport \"./board.css\";\n\n// Importing the useState hook, useEffect hook and useRef hook\nimport { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = _ref => {\n  _s();\n  let {\n    reset,\n    setReset,\n    winner,\n    setWinner\n  } = _ref;\n  // Creating a turn state, which indicates the current turn\n  const [turn, setTurn] = useState(0);\n\n  // Creating a data state, which contains the\n  // current picture of the board\n  const [data, setData] = useState(['', '', '', '', '', '', '', '', '']);\n\n  // Creating a reference for the board\n  const boardRef = useRef(null);\n\n  // Function to draw on the board\n  const draw = (event, index) => {\n    // Draws only if the position is not taken\n    // and winner is not decided yet\n    if (data[index - 1] === '' && winner === '') {\n      // Draws X if it's player 1's turn else draws O\n      const current = turn === 0 ? \"X\" : \"O\";\n\n      // Updating the data state\n      data[index - 1] = current;\n\n      //Drawing on the board\n      event.target.innerText = current;\n\n      // Switching the turn\n      setTurn(turn === 0 ? 1 : 0);\n    }\n  };\n\n  // UseEffect hook used to reset the board whenever\n  // a winner is decided\n  useEffect(() => {\n    // Clearing the data state\n    setData(['', '', '', '', '', '', '', '', '']);\n\n    // Getting all the children(cells) of the board\n    const cells = boardRef.current.children;\n\n    // Clearing out the board\n    for (let i = 0; i < 9; i++) {\n      cells[i].innerText = '';\n    }\n\n    // Resetting the turn to player 0\n    setTurn(0);\n\n    // Resetting the winner\n    setWinner('');\n    setReset(false);\n  }, [reset, setReset, setWinner]);\n\n  // useEffect hook used to check for a winner\n  useEffect(() => {\n    // Checks for the win condition in rows\n    const checkRow = () => {\n      let ans = false;\n      for (let i = 0; i < 9; i += 3) {\n        ans |= data[i] === data[i + 1] && data[i] === data[i + 2] && data[i] !== '';\n      }\n      return ans;\n    };\n\n    // Checks for the win condition in cols\n    const checkCol = () => {\n      let ans = false;\n      for (let i = 0; i < 3; i++) {\n        ans |= data[i] === data[i + 3] && data[i] === data[i + 6] && data[i] !== '';\n      }\n      return ans;\n    };\n\n    // Checks for the win condition in diagonals\n    const checkDiagonal = () => {\n      return data[0] === data[4] && data[0] === data[8] && data[0] !== '' || data[2] === data[4] && data[2] === data[6] && data[2] !== '';\n    };\n\n    // Checks if at all a win condition is present\n    const checkWin = () => {\n      return checkRow() || checkCol() || checkDiagonal();\n    };\n\n    // Checks for a tie\n    const checkTie = () => {\n      let count = 0;\n      data.forEach(cell => {\n        if (cell !== '') {\n          count++;\n        }\n      });\n      return count === 9;\n    };\n\n    // Setting the winner in case of a win\n    if (checkWin()) {\n      setWinner(turn === 0 ? \"Player 2 Wins!\" : \"Player 1 Wins!\");\n    } else if (checkTie()) {\n      // Setting the winner to tie in case of a tie\n      setWinner(\"It's a Tie!\");\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: boardRef,\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"input\",\n      id: \"input-1\",\n      onClick: e => draw(e, 1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"input\",\n      id: \"input-2\",\n      onClick: e => draw(e, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"input\",\n      id: \"input-3\",\n      onClick: e => draw(e, 3)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"input\",\n      id: \"input-4\",\n      onClick: e => draw(e, 4)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"input\",\n      id: \"input-5\",\n      onClick: e => draw(e, 5)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"input\",\n      id: \"input-6\",\n      onClick: e => draw(e, 6)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"input\",\n      id: \"input-7\",\n      onClick: e => draw(e, 7)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"input\",\n      id: \"input-8\",\n      onClick: e => draw(e, 8)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"input\",\n      id: \"input-9\",\n      onClick: e => draw(e, 9)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 3\n  }, this);\n};\n_s(Board, \"KBj0XRy5dJDHwQLA6O5dr8n5K8o=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","useRef","Board","reset","setReset","winner","setWinner","turn","setTurn","data","setData","boardRef","draw","event","index","current","target","innerText","cells","children","i","checkRow","ans","checkCol","checkDiagonal","checkWin","checkTie","count","forEach","cell","e"],"sources":["/usr/share/caddy/tictactoe/src/board.js"],"sourcesContent":["// Importing the CSS for the board\nimport \"./board.css\";\n\n// Importing the useState hook, useEffect hook and useRef hook\nimport { useState, useEffect, useRef } from \"react\";\n\nconst Board = ({ reset, setReset, winner, setWinner }) => {\n\n\t// Creating a turn state, which indicates the current turn\n\tconst [turn, setTurn] = useState(0);\n\n\t// Creating a data state, which contains the\n\t// current picture of the board\n\tconst [data, setData] = useState(['', '', '', '', '',\n\t\t'', '', '', ''])\n\n\t// Creating a reference for the board\n\tconst boardRef = useRef(null);\n\n\t// Function to draw on the board\n\tconst draw = (event, index) => {\n\t\t// Draws only if the position is not taken\n\t\t// and winner is not decided yet\n\t\tif (data[index - 1] === '' && winner === '') {\n\n\t\t\t// Draws X if it's player 1's turn else draws O\n\t\t\tconst current = turn === 0 ? \"X\" : \"O\"\n\n\t\t\t// Updating the data state\n\t\t\tdata[index - 1] = current;\n\n\t\t\t//Drawing on the board\n\t\t\tevent.target.innerText = current;\n\n\t\t\t// Switching the turn\n\t\t\tsetTurn(turn === 0 ? 1 : 0)\n\t\t}\n\t}\n\n\t// UseEffect hook used to reset the board whenever\n\t// a winner is decided\n\tuseEffect(() => {\n\n\t\t// Clearing the data state\n\t\tsetData(['', '', '', '', '', '', '', '', '']);\n\n\t\t// Getting all the children(cells) of the board\n\t\tconst cells = boardRef.current.children\n\n\t\t// Clearing out the board\n\t\tfor (let i = 0; i < 9; i++) {\n\t\t\tcells[i].innerText = '';\n\t\t}\n\n\t\t// Resetting the turn to player 0\n\t\tsetTurn(0);\n\n\t\t// Resetting the winner\n\t\tsetWinner('');\n\t\tsetReset(false);\n\t}, [reset, setReset, setWinner])\n\n\n\t// useEffect hook used to check for a winner\n\tuseEffect(() => {\n\n\t\t// Checks for the win condition in rows\n\t\tconst checkRow = () => {\n\t\t\tlet ans = false;\n\t\t\tfor (let i = 0; i < 9; i += 3) {\n\t\t\t\tans |= (data[i] === data[i + 1] &&\n\t\t\t\tdata[i] === data[i + 2] &&\n\t\t\t\tdata[i] !== '')\n\t\t\t}\n\t\t\treturn ans;\n\t\t}\n\n\t\t// Checks for the win condition in cols\n\t\tconst checkCol = () => {\n\t\t\tlet ans = false;\n\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\tans |= (data[i] === data[i + 3] &&\n\t\t\t\tdata[i] === data[i + 6] &&\n\t\t\t\tdata[i] !== '')\n\t\t\t}\n\t\t\treturn ans;\n\t\t}\n\n\t\t// Checks for the win condition in diagonals\n\t\tconst checkDiagonal = () => {\n\t\t\treturn ((data[0] === data[4] &&\n\t\t\tdata[0] === data[8] && data[0] !== '') ||\n\t\t\t(data[2] === data[4] && data[2] === data[6] &&\n\t\t\tdata[2] !== ''));\n\t\t}\n\n\t\t// Checks if at all a win condition is present\n\t\tconst checkWin = () => {\n\t\t\treturn (checkRow() || checkCol() || checkDiagonal());\n\t\t}\n\n\t\t// Checks for a tie\n\t\tconst checkTie = () => {\n\t\t\tlet count = 0;\n\t\t\tdata.forEach((cell) => {\n\t\t\t\tif (cell !== '') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn count === 9;\n\t\t}\n\n\t\t// Setting the winner in case of a win\n\t\tif (checkWin()) {\n\t\t\tsetWinner(turn === 0 ? \"Player 2 Wins!\" :\n\t\t\t\"Player 1 Wins!\");\n\t\t} else if (checkTie()) {\n\n\t\t\t// Setting the winner to tie in case of a tie\n\t\t\tsetWinner(\"It's a Tie!\");\n\t\t}\n\n\t})\n\n\treturn (\n\t\t<div ref={boardRef} className=\"board\">\n\t\t\t<div class=\"input\" id=\"input-1\"\n\t\t\t\tonClick={(e) => draw(e, 1)}></div>\n\t\t\t<div class=\"input\" id=\"input-2\"\n\t\t\t\tonClick={(e) => draw(e, 2)}></div>\n\t\t\t<div class=\"input\" id=\"input-3\"\n\t\t\t\tonClick={(e) => draw(e, 3)}></div>\n\t\t\t<div class=\"input\" id=\"input-4\"\n\t\t\t\tonClick={(e) => draw(e, 4)}></div>\n\t\t\t<div class=\"input\" id=\"input-5\"\n\t\t\t\tonClick={(e) => draw(e, 5)}></div>\n\t\t\t<div class=\"input\" id=\"input-6\"\n\t\t\t\tonClick={(e) => draw(e, 6)}></div>\n\t\t\t<div class=\"input\" id=\"input-7\"\n\t\t\t\tonClick={(e) => draw(e, 7)}></div>\n\t\t\t<div class=\"input\" id=\"input-8\"\n\t\t\t\tonClick={(e) => draw(e, 8)}></div>\n\t\t\t<div class=\"input\" id=\"input-9\"\n\t\t\t\tonClick={(e) => draw(e, 9)}></div>\n\t\t</div>\n\t)\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}